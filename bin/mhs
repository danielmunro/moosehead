#!/usr/bin/env bash

set -e

# @describe A cli for common tasks

run() {
  IMAGE_REPO=$1
  TAG=$2
  docker run --publish 4000:4000 \
             --publish 4080:4080 \
             --mount type=volume,src=mud-data,dst=/mud/moosehead/data \
             --restart unless-stopped \
             --detach \
             --label mhs=true \
             --tty \
             $IMAGE_REPO:$TAG $TAG 4000 4080
}

# @cmd Create a backup of MHS data
# @arg env_file!
backup() {
  docker run --volume mud-data:/backup/data \
             --env-file $argc_env_file \
             --rm \
             --entrypoint backup \
             offen/docker-volume-backup:v2
}

# @cmd Build the current source and reload the running container
# @flag -t --tail Tail the container log
# @flag -o --olc  Run as OLC
dev_reload() {
  if [ "$argc_olc" == "1" ]; then
    RUN_VERSION="OLC_VERSION"
  else
    RUN_VERSION="GAME_VERSION"
  fi

  echo "building the container with run version ${RUN_VERSION}"

  docker build --build-arg RUN_VERSION=$RUN_VERSION -t mhs:latest .

  CONTAINER=$(docker ps --quiet --filter label=mhs)

  if [ ! -z "$CONTAINER" ]; then
    echo "stopping and removing the running container"
    docker stop $CONTAINER
    docker rm $CONTAINER
  fi

  echo "running the new container"

  CONTAINER=$(run mhs latest)

  echo "done"

  if [ "$argc_tail" ]; then
    docker logs -f $CONTAINER
  fi
}

# @cmd Run the tests
test() {
  docker build --build-arg RUN_VERSION=GAME_VERSION -f Dockerfile-test -t mhs:test .
  docker run mhs:test
}

# @cmd Build a production image
# @arg username!
# @arg cr_pat!
# @arg image!
prod_build() {
  docker build -t $argc_image .
  echo "$argc_cr_pat" | docker login -u $argc_username ghcr.io --password-stdin
  docker push $argc_image
}

# @cmd Stop the running container and start a new one
# @arg image!
# @arg tag!
reload() {
  CONTAINER=$(docker ps --quiet --filter label=mhs)

  if [ ! -z "$CONTAINER" ]; then
    echo "stopping and removing the running container"
    docker stop $CONTAINER
    docker rm $CONTAINER
  fi

  run $argc_image $argc_tag
}

# @cmd Deploy a production image
# @arg ssh_keyfile!
# @arg ssh_destination!
# @arg ssh_port!
# @arg image!
# @arg tag!
# @flag -rv --run-version The version to run, either GAME_VERSION or OLC_VERSION
prod_deploy() {
  RUN_VERSION=${argc_run_version:-"GAME_VERSION"}

  echo "ssh to prod machine"

  ssh -i $argc_ssh_keyfile $argc_ssh_destination -p $argc_ssh_port << EOF

cd github/moosehead

git pull

echo "pulling the container"

docker pull $argc_image:$argc_tag

echo "running the new container"

./bin/mhs reload $argc_image $argc_tag

echo "done"

EOF
}

# ARGC-BUILD {
# This block was generated by argc (https://github.com/sigoden/argc).
# Modifying it manually is not recommended

_argc_run() {
    if [[ "${1:-}" == "___internal___" ]]; then
        _argc_die "error: unsupported ___internal___ command"
    fi
    if [[ "${OS:-}" == "Windows_NT" ]] && [[ -n "${MSYSTEM:-}" ]]; then
        set -o igncr
    fi
    argc__args=("$(basename "$0" .sh)" "$@")
    argc__positionals=()
    _argc_index=1
    _argc_len="${#argc__args[@]}"
    _argc_tools=()
    _argc_parse
    if [ -n "${argc__fn:-}" ]; then
        $argc__fn "${argc__positionals[@]}"
    fi
}

_argc_usage() {
    cat <<-'EOF'
A cli for common tasks

USAGE: Argcfile <COMMAND>

COMMANDS:
  backup       Create a backup of MHS data
  dev_reload   Build the current source and reload the running container [aliases: dev-reload]
  test         Run the tests
  prod_build   Build a production image [aliases: prod-build]
  reload       Stop the running container and start a new one
  prod_deploy  Deploy a production image [aliases: prod-deploy]
EOF
    exit
}

_argc_version() {
    echo Argcfile 0.0.0
    exit
}

_argc_parse() {
    local _argc_key _argc_action
    local _argc_subcmds="backup, dev_reload, dev-reload, test, prod_build, prod-build, reload, prod_deploy, prod-deploy"
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage
            ;;
        --version | -version | -V)
            _argc_version
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        backup)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_backup
            break
            ;;
        dev_reload | dev-reload)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_dev_reload
            break
            ;;
        test)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_test
            break
            ;;
        prod_build | prod-build)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_prod_build
            break
            ;;
        reload)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_reload
            break
            ;;
        prod_deploy | prod-deploy)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_prod_deploy
            break
            ;;
        help)
            local help_arg="${argc__args[$((_argc_index + 1))]:-}"
            case "$help_arg" in
            backup)
                _argc_usage_backup
                ;;
            dev_reload | dev-reload)
                _argc_usage_dev_reload
                ;;
            test)
                _argc_usage_test
                ;;
            prod_build | prod-build)
                _argc_usage_prod_build
                ;;
            reload)
                _argc_usage_reload
                ;;
            prod_deploy | prod-deploy)
                _argc_usage_prod_deploy
                ;;
            "")
                _argc_usage
                ;;
            *)
                _argc_die "error: invalid value \`$help_arg\` for \`<command>\`"$'\n'"  [possible values: $_argc_subcmds]"
                ;;
            esac
            ;;
        *)
            _argc_die "error: \`Argcfile\` requires a subcommand but one was not provided"$'\n'"  [subcommands: $_argc_subcmds]"
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        _argc_usage
    fi
}

_argc_usage_backup() {
    cat <<-'EOF'
Create a backup of MHS data

USAGE: Argcfile backup <ENV-FILE>

ARGS:
  <ENV-FILE>
EOF
    exit
}

_argc_parse_backup() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_backup
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=backup
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_backup
        fi
        _argc_match_positionals 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_env_file="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<ENV-FILE>\` were not provided"
        fi
    fi
}

_argc_usage_dev_reload() {
    cat <<-'EOF'
Build the current source and reload the running container

USAGE: Argcfile dev_reload [OPTIONS]

OPTIONS:
  -t, --tail  Tail the container log
  -o, --olc   Run as OLC
  -h, --help  Print help
EOF
    exit
}

_argc_parse_dev_reload() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_dev_reload
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        --tail | -t)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--tail\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_tail:-}" ]]; then
                _argc_die "error: the argument \`--tail\` cannot be used multiple times"
            else
                argc_tail=1
            fi
            ;;
        --olc | -o)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--olc\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_olc:-}" ]]; then
                _argc_die "error: the argument \`--olc\` cannot be used multiple times"
            else
                argc_olc=1
            fi
            ;;
        *)
            if _argc_maybe_flag_option "-" "$_argc_item"; then
                _argc_die "error: unexpected argument \`$_argc_key\` found"
            fi
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=dev_reload
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_dev_reload
        fi
    fi
}

_argc_usage_test() {
    cat <<-'EOF'
Run the tests

USAGE: Argcfile test
EOF
    exit
}

_argc_parse_test() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_test
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=test
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_test
        fi
    fi
}

_argc_usage_prod_build() {
    cat <<-'EOF'
Build a production image

USAGE: Argcfile prod_build <USERNAME> <CR-PAT> <IMAGE>

ARGS:
  <USERNAME>
  <CR-PAT>
  <IMAGE>
EOF
    exit
}

_argc_parse_prod_build() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_prod_build
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=prod_build
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_prod_build
        fi
        _argc_match_positionals 0 0 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_username="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<USERNAME>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[1]:-}"
        if [[ -n "$values_index" ]]; then
            argc_cr_pat="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<CR-PAT>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[2]:-}"
        if [[ -n "$values_index" ]]; then
            argc_image="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<IMAGE>\` were not provided"
        fi
    fi
}

_argc_usage_reload() {
    cat <<-'EOF'
Stop the running container and start a new one

USAGE: Argcfile reload <IMAGE> <TAG>

ARGS:
  <IMAGE>
  <TAG>
EOF
    exit
}

_argc_parse_reload() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_reload
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=reload
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_reload
        fi
        _argc_match_positionals 0 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_image="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<IMAGE>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[1]:-}"
        if [[ -n "$values_index" ]]; then
            argc_tag="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<TAG>\` were not provided"
        fi
    fi
}

_argc_usage_prod_deploy() {
    cat <<-'EOF'
Deploy a production image

USAGE: Argcfile prod_deploy [OPTIONS] <SSH-KEYFILE> <SSH-DESTINATION> <SSH-PORT> <IMAGE> <TAG>

ARGS:
  <SSH-KEYFILE>
  <SSH-DESTINATION>
  <SSH-PORT>
  <IMAGE>
  <TAG>

OPTIONS:
       -rv    --run-version The version to run, either GAME_VERSION or OLC_VERSION
  -h,  -help  Print help
EOF
    exit
}

_argc_parse_prod_deploy() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_prod_deploy
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        -rv)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`-rv\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_rv:-}" ]]; then
                _argc_die "error: the argument \`-rv\` cannot be used multiple times"
            else
                argc_rv=1
            fi
            ;;
        *)
            if _argc_maybe_flag_option "-" "$_argc_item"; then
                _argc_die "error: unexpected argument \`$_argc_key\` found"
            fi
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=prod_deploy
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_prod_deploy
        fi
        _argc_match_positionals 0 0 0 0 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_ssh_keyfile="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<SSH-KEYFILE>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[1]:-}"
        if [[ -n "$values_index" ]]; then
            argc_ssh_destination="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<SSH-DESTINATION>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[2]:-}"
        if [[ -n "$values_index" ]]; then
            argc_ssh_port="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<SSH-PORT>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[3]:-}"
        if [[ -n "$values_index" ]]; then
            argc_image="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<IMAGE>\` were not provided"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[4]:-}"
        if [[ -n "$values_index" ]]; then
            argc_tag="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<TAG>\` were not provided"
        fi
    fi
}

_argc_match_positionals() {
    _argc_match_positionals_values=()
    _argc_match_positionals_len=0
    local params=("$@")
    local args_len="${#argc__positionals[@]}"
    if [[ $args_len -eq 0 ]]; then
        return
    fi
    local params_len=$# arg_index=0 param_index=0
    while [[ $param_index -lt $params_len && $arg_index -lt $args_len ]]; do
        local takes=0
        if [[ "${params[param_index]}" -eq 1 ]]; then
            if [[ $param_index -eq 0 ]] &&
                [[ ${_argc_dash:-} -gt 0 ]] &&
                [[ $params_len -eq 2 ]] &&
                [[ "${params[$((param_index + 1))]}" -eq 1 ]] \
                ; then
                takes=${_argc_dash:-}
            else
                local arg_diff=$((args_len - arg_index)) param_diff=$((params_len - param_index))
                if [[ $arg_diff -gt $param_diff ]]; then
                    takes=$((arg_diff - param_diff + 1))
                else
                    takes=1
                fi
            fi
        else
            takes=1
        fi
        _argc_match_positionals_values+=("$arg_index:$takes")
        arg_index=$((arg_index + takes))
        param_index=$((param_index + 1))
    done
    if [[ $arg_index -lt $args_len ]]; then
        _argc_match_positionals_values+=("$arg_index:$((args_len - arg_index))")
    fi
    _argc_match_positionals_len=${#_argc_match_positionals_values[@]}
    if [[ $params_len -gt 0 ]] && [[ $_argc_match_positionals_len -gt $params_len ]]; then
        local index="${_argc_match_positionals_values[params_len]%%:*}"
        _argc_die "error: unexpected argument \`${argc__positionals[index]}\` found"
    fi
}

_argc_maybe_flag_option() {
    local signs="$1" arg="$2"
    if [[ -z "$signs" ]]; then
        return 1
    fi
    local cond=false
    if [[ "$signs" == *"+"* ]]; then
        if [[ "$arg" =~ ^\+[^+].* ]]; then
            cond=true
        fi
    elif [[ "$arg" == -* ]]; then
        if (( ${#arg} < 3 )) || [[ ! "$arg" =~ ^---.* ]]; then
            cond=true
        fi
    fi
    if [[ "$cond" == "false" ]]; then
        return 1
    fi
    local value="${arg%%=*}"
    if [[ "$value" =~ [[:space:]] ]]; then
        return 1
    fi
    return 0
}

_argc_die() {
    if [[ $# -eq 0 ]]; then
        cat
    else
        echo "$*" >&2
    fi
    exit 1
}

_argc_run "$@"

# ARGC-BUILD }

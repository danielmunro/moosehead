#ifndef MOOSEHEAD_HANDLER_H
#define MOOSEHEAD_HANDLER_H

void affect_modify(CHAR_DATA *ch, AFFECT_DATA *paf, bool fAdd, int AppType);
long wiznet_lookup (const char *name);
char *extra2_bit_name(int extra_flags2);
bool has_boat (CHAR_DATA *ch);
int count_fight_size (CHAR_DATA *ch);

bool tick_pulse_command(CHAR_DATA *ch);
void prompt_pulse_command (CHAR_DATA *ch);
void end_pulse_command (CHAR_DATA *ch, bool success, bool violent);
bool damage_pulse_command (CHAR_DATA *ch);
void damage_add (CHAR_DATA *ch, CHAR_DATA *victim, int amount, int duration);
void damage_remove (CHAR_DATA *ch, DAMAGE_DATA *dam);
DAMAGE_DATA *damage_find (CHAR_DATA *victim, char *source);
void damage_decrement (CHAR_DATA *ch);
int room_has_medium (CHAR_DATA *);
bool check_hai_ruki (CHAR_DATA *);
bool shogun_in_group (CHAR_DATA *);
int count_groupies_in_room (CHAR_DATA *);
int smurf_group_count (CHAR_DATA *);
bool check_is_dot (int dt);
CHAR_DATA *get_char_by_id (long id);
int get_sac_points (CHAR_DATA *ch, int points );
void clear_mount (CHAR_DATA *ch);
bool is_mounted (CHAR_DATA *ch);
AFFECT_DATA *affect_find (AFFECT_DATA *paf, int sn);
void affect_check (CHAR_DATA *ch, int where, int vector);
int count_users (OBJ_DATA *obj);
void deduct_cost (CHAR_DATA *ch, int cost);
void wait_state (CHAR_DATA *ch, int npulse);
void affect_enchant (OBJ_DATA *obj);
int check_immune (CHAR_DATA *ch, int dam_type);
int liq_lookup (const char *name);
int material_lookup (const char *name);
int weapon_lookup (const char *name);
int weapon_type (const char *name);
int avg_weapon_damage (bool new_type, int value1, int value2);
int deity_lookup (const char *name);
int deity_type (const char *name);
char *weapon_name (int weapon_Type);
int item_lookup (const char *name);
char *item_name (int item_type);
int attack_lookup (const char *name);
int race_lookup (const char *name);
long pnet_lookup (const char *name);
int class_lookup (const char *name);
int kit_lookup (const char *name);
bool is_clan (CHAR_DATA *ch);
bool is_same_clan (CHAR_DATA *ch, CHAR_DATA *victim);
bool is_old_mob (CHAR_DATA *ch);
bool out_of_element (CHAR_DATA *ch);
int get_skill (CHAR_DATA *ch, int sn);
int get_weapon_sn (CHAR_DATA *ch, bool fSecondary);
int get_weapon_skill (CHAR_DATA *ch, int sn);
int get_age (CHAR_DATA *ch);
void reset_char (CHAR_DATA *ch);
int get_trust (CHAR_DATA *ch);
int get_curr_stat (CHAR_DATA *ch, int stat);
int get_max_train (CHAR_DATA *ch, int stat);
int can_carry_n (CHAR_DATA *ch);
int can_carry_w (CHAR_DATA *ch);
int apply_chi (CHAR_DATA *ch, int num);
bool is_name (char *str, char *namelist);
bool is_exact_name (char *str, char *namelist);
void flash_affect_to_char (CHAR_DATA *ch, AFFECT_DATA *paf);
void affect_to_char (CHAR_DATA *ch, AFFECT_DATA *paf);
void affect_to_room (ROOM_INDEX_DATA *room, AFFECT_DATA *paf);
void affect_to_obj (OBJ_DATA *obj, AFFECT_DATA *paf);
void raffect_remove (ROOM_INDEX_DATA *room, AFFECT_DATA *paf);
bool check_trap (ROOM_INDEX_DATA *room, int trap);
void flash_affect_remove (CHAR_DATA *ch, AFFECT_DATA *paf, int AppType);
void affect_remove (CHAR_DATA *ch, AFFECT_DATA *paf, int AppType);
void affect_remove_obj (OBJ_DATA *obj, AFFECT_DATA *paf);
void affect_strip (CHAR_DATA *ch, int sn);
bool is_flash_affected (CHAR_DATA *ch, int sn);
bool is_affected (CHAR_DATA *ch, int sn);
bool is_room_affected (ROOM_INDEX_DATA *room, int sn);
void affect_join (CHAR_DATA *ch, AFFECT_DATA *paf);
void char_from_room (CHAR_DATA *ch);
void char_to_room (CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex);
void obj_to_char (OBJ_DATA *obj, CHAR_DATA *ch);
void obj_from_char (OBJ_DATA *obj);
int apply_ac (OBJ_DATA *obj, int iWear, int type);
OBJ_DATA *get_eq_char (CHAR_DATA *ch, int iWear);
void equip_char (CHAR_DATA *ch, OBJ_DATA *obj, int iWear);
void unequip_char (CHAR_DATA *ch, OBJ_DATA *obj);
int count_obj_list (OBJ_INDEX_DATA *obj, OBJ_DATA *list);
void obj_from_room (OBJ_DATA *obj);
void obj_to_room (OBJ_DATA *obj, ROOM_INDEX_DATA *pRoomIndex);
void obj_to_obj (OBJ_DATA *obj, OBJ_DATA *obj_to);
void obj_from_obj (OBJ_DATA *obj);
void extract_obj (OBJ_DATA *obj);
void extract_char (CHAR_DATA *ch, bool fPull);
CHAR_DATA *get_char_room (CHAR_DATA *ch, char *argument);
CHAR_DATA *get_char_online (CHAR_DATA *ch, char *argument);
CHAR_DATA *get_char_world (CHAR_DATA *ch, char *argument);
OBJ_DATA *get_obj_type (OBJ_INDEX_DATA *pObjIndexData);
OBJ_DATA *get_obj_list (CHAR_DATA *ch, char *argument, OBJ_DATA *list);
OBJ_DATA *find_obj_carry (CHAR_DATA *ch, CHAR_DATA *vc, char *arg);
OBJ_DATA *find_obj_wear (CHAR_DATA *ch, CHAR_DATA *vc, char *arg);
OBJ_DATA *get_obj_carry (CHAR_DATA *ch, char *argument);
OBJ_DATA *get_obj_wear (CHAR_DATA *ch, char *argument);
OBJ_DATA *get_obj_here (CHAR_DATA *ch, char *argument);
OBJ_DATA *get_obj_world (CHAR_DATA *ch, char *argument);
OBJ_DATA *create_money (int gold, int silver);
int get_obj_number (OBJ_DATA *obj);
int get_obj_weight (OBJ_DATA *obj);
int get_true_weight (OBJ_DATA *obj);
bool room_is_dark (ROOM_INDEX_DATA *pRoomIndex);
bool is_room_owner (CHAR_DATA *ch, ROOM_INDEX_DATA *room);
bool room_is_private (CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex);
bool can_see (CHAR_DATA *ch, CHAR_DATA *victim, bool ooc);
bool can_see_obj (CHAR_DATA *ch, OBJ_DATA *obj);
bool is_room_clan (CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex);
bool can_see_room (CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex);
bool can_drop_obj (CHAR_DATA *ch, OBJ_DATA *obj);
bool can_wear_obj (CHAR_DATA *ch, OBJ_DATA *obj);
char *item_type_name (OBJ_DATA *obj);
char *item_type_name_num (int num);
char *affect_loc_name (int location);
char *affect_bit_name (int vector);
char *extra_bit_name (int extra_flags);
char *extra_bit_name2 (int extra_flags2);
char *wear_bit_name (int wear_flags);
char *act_bit_name (int act_flags);
char *mhs_bit_name (int bit_name);
char *off_bit_name (int off_flags);
char *imm_bit_name (int imm_flags);
char *form_bit_name (int form_flags);
char *part_bit_name (int part_flags);
char *weapon_bit_name (int weapon_flags);
char *comm_bit_name (int comm_flags);
char *cont_bit_name (int cont_flags);
char *clan_bit_name (int clan_flags);
char *exit_bit_name (int exit_flags);

#endif //MOOSEHEAD_HANDLER_H
